package org.davesEnterprise;

import org.davesEnterprise.download.DownloaderBuilder;
import org.davesEnterprise.enums.CurrentState;
import org.davesEnterprise.enums.SegmentValidation;
import org.davesEnterprise.util.Args;

import javax.swing.*;
import java.awt.*;
import java.nio.file.Path;
import java.util.concurrent.CompletableFuture;

public class GuiForm extends JPanel {
    public JPanel mainPanel;

    public JTextArea uri;
    public JTextField outputName;

    public JSpinner downloads;
    public JSpinner validations;
    public JSpinner retries;

    public JComboBox<SegmentValidation> validationType;

    public JProgressBar progressDownload;
    public JProgressBar progressValidation;
    public JLabel currentState;

    public JButton start;
    public JTextField workingDir;


    public GuiForm() {
        this.downloads.setValue(Args.get().concurrentDownloads);
        this.validations.setValue(Args.get().concurrentValidations);
        this.retries.setValue(Args.get().retries);

        this.workingDir.setText(String.valueOf(defaultWorkingDir()));

        this.validationType.setModel(new DefaultComboBoxModel<>(SegmentValidation.values()));
        this.validationType.setSelectedItem(SegmentValidation.DECODE);

        this.currentState.setText(CurrentState.IDLE.toString());

        this.start.addActionListener(_ -> this.start());
    }

    private static Path defaultWorkingDir() {
        return Path.of(System.getProperty("user.home"), "Downloads");
    }

    private void start() {
        Path workingDir;
        if (!this.workingDir.getText().isBlank()) {
            workingDir = Path.of(this.workingDir.getText());
        } else {
            workingDir = defaultWorkingDir();
        }

        String outputName = this.outputName.getText().isBlank() ? DownloaderBuilder.getCurrentDateTime() : this.outputName.getText();

        this.start.setEnabled(false);

        CompletableFuture.runAsync(() -> {
            new DownloaderBuilder(workingDir.resolve(outputName))
                    .setPlaylist(this.uri.getText())
                    .setSegmentValidation((SegmentValidation) this.validationType.getSelectedItem())
                    .setConcurrentDownloads((Integer) this.downloads.getValue())
                    .setConcurrentValidations((Integer) this.validations.getValue())
                    .setRetries((Integer) this.retries.getValue())
                    .setGuiForm(this)
                    .build().start();
        }).thenRun(() -> SwingUtilities.invokeLater(() -> this.start.setEnabled(true)));
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setMinimumSize(new Dimension(1006, 295));
        validations = new JSpinner();
        validations.setToolTipText("concurrent validations");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 8;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(validations, gbc);
        uri = new JTextArea();
        uri.setLineWrap(true);
        uri.setText("");
        uri.setToolTipText("M3U8 URI");
        uri.setWrapStyleWord(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.gridwidth = 3;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(uri, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("Concurrent Validations:");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(label1, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Retries:");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 9;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(label2, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("The URI to the M3U8 HLS playlist: ");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(label3, gbc);
        outputName = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 6;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(outputName, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("Output Name:");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 5;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(label4, gbc);
        progressDownload = new JProgressBar();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 12;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(progressDownload, gbc);
        progressValidation = new JProgressBar();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 14;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(progressValidation, gbc);
        start = new JButton();
        start.setText("Start!");
        start.setToolTipText("start");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 15;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(start, gbc);
        retries = new JSpinner();
        retries.setToolTipText("retries per segment");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 10;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(retries, gbc);
        final JLabel label5 = new JLabel();
        label5.setText("Concurrent Downloads:");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(label5, gbc);
        downloads = new JSpinner();
        downloads.setToolTipText("concurrent downloads");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 6;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(downloads, gbc);
        final JLabel label6 = new JLabel();
        label6.setText("Download:");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 11;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(label6, gbc);
        final JLabel label7 = new JLabel();
        label7.setText("Validation:");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 13;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(label7, gbc);
        validationType = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("None");
        defaultComboBoxModel1.addElement("Metadata");
        defaultComboBoxModel1.addElement("Metadata + Decode");
        validationType.setModel(defaultComboBoxModel1);
        validationType.setToolTipText("type of segment validation");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(validationType, gbc);
        final JLabel label8 = new JLabel();
        label8.setText("Segment Validation:");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(label8, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 16;
        gbc.fill = GridBagConstraints.VERTICAL;
        mainPanel.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.VERTICAL;
        mainPanel.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer4, gbc);
        final JLabel label9 = new JLabel();
        label9.setText("Working Dir:");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(label9, gbc);
        workingDir = new JTextField();
        workingDir.setText("");
        workingDir.setToolTipText("working directory");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(workingDir, gbc);
        currentState = new JLabel();
        currentState.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 10;
        mainPanel.add(currentState, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
